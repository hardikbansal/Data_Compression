include "Common/Compat.h"
{27,16}/System.h"
{28,9} <iostream>{20,10}<f{19,16} "ThriftBroker/Clien{100,14}{33,13}/gen-cpp/HqlService{45,26}/ThriftHelper{84,26}/SerializedCellsReader.h"

using namespace Hypertable;{28,26}e::ThriftGen;

void run(Thrift::Client *client);
void test_rename_alter{48,22}t, std::ostream &ou{67,13}_guid{59,54}_unique{120,54}_hql{178,54}_sca{285,23}{59,36}n_keysonly{127,55}set{411,35}_schema{405,54}_pu{100,36}_async{504,54}_erro{564,45}


int main() {
  {673,21}t = new{29,14}t("localhost", 38080);
  run({728,8}
}
{766,33}) {
  try {
   {732,17}t = std::cout;
    out << "running{758,9}d" << std::endl;
   {787,10}({830,7} out){73,26}_unique{75,24}{803,7}{77,39}_hql{149,24}_hql{148,39}_schema{223,24}{666,7}{77,41}can{75,26}ca{448,7}{150,34}set{147,25}set{519,9}{437,25}_pu{66,25}_pu{66,35}{205,73}_async{577,24}_async{578,39}{1476,12}r{659,24}{1513,13}{667,39}_erro{82,25}_erro{75,40}{1336,13}y{526,28}{1374,10}{833,16} }
  catch (ClientException &e){976,11}:cout << e{929,18} exit(1);
  }
}
{1804,65}) {
{1060,9}"Rename and {400,22} if (!client->{2025,8}e_exists("test"))
  {36,17}_create{36,7});
  N{2089,8} ns ={51,18}_open{49,11} HqlResult result;{105,10}>hql_query(result, ns, "drop table if exists foo"){61,58}o_renamed{69,36}"create table foo('bar'){129,13}>rename_table(ns, "foo", "{110,16} String str = (String)"<Schema generation=\"2\">" +
    "  <AccessGroup name=\"default{41,13}   <ColumnFamily id=\"1{36,15}   <G{110,8}n>1</{14,10}{41,16}<Name>bar</Name{72,16}<Counter>false</{15,7}{111,16}<deleted>true</{14,7}{185,14}</{186,11}y{213,32}{290,15}{213,16}>2{213,33}>\"bar2\"{218,69}{257,7}{219,48} </{475,10}p{499,9}"</Schema>"{809,11}>alter{618,14}{721,9}", str{795,12}>ge{2509,7}a_str_with_ids(str, {64,16}");{1103,9} str{2147,16}{1047,8}>drop{132,25} false{929,12}{1095,11}close(ns);{1280,13}{3017,47}) {{844,10}s{240,13}enerate_guid(s{209,11} "{28,7}e guid: " << s{2375,14}{2502,9}{3108,54}) {{1256,22}{1402,41} {1404,86}{1384,52} UniqueT{68,39}{1322,13}{60,10}t (cf1 TIME_ORDER DESC "
        {8,7}     "MAX_VERSIONS 1, cf2){662,12} result{2812,14}

 {3728,21}n::Key key;
  key.column_family="cf1"{1429,10} ret, value;
   
  key.row="row1{903,12}{616,14}(valu{754,13}>create_cell{3690,7}(re{1750,7}"{345,10}", key, {65,9}{115,12}w2{115,100}{230,13}w3{230,100}{345,13}w4{345,100}{460,13}w5{460,100}  value=""{472,15}w6{1490,12}{555,57} assert(!ret.empty(){119,28}w7{119,100}{238,17}w8{238,93} bool caught=false;{3940,12}{945,32}{1392,10}{947,57}{3100,37}{162,7}=true{3152,7}{448,7}(caught);
{1841,34}{3122,11}_hql{1689,100}{1689,100}{3073,47} thrift_{1758,40}{3012,13}{61,11}t ( col {3021,14}{3211,23}"insert into{68,12} values{1744,13} "('2008-11-11 11:11:11', 'k1', 'col', 'v1'),{1803,14}{59,27}k2{59,11}v2{59,44}k3{118,11}v3{3263,15}{3453,23}"select * from{373,17}{1938,32}{3566,8}tAsArrays result_as_array{2488,12}{3584,9}y{31,9}s({48,15}s{151,50}{109,10}{2536,15}{2716,44}_scan{2716,48}ScanSpec ss{3884,50}

  Scanner {3931,11}>open_scanner(ns, "{778,11}", ss);
  std::vector<{2328,22}:Cell> cells;

  do{1327,14}>scanner_get_cells(cells, s);
    foreach_ht(const{2434,23}:Cell &cell, cells)
    {3175,8} cell{3176,16} } while (cells.size(){1314,13}{161,8}_close(s);

  ss.cell_limit=1;
  ss.__isset{27,10}t = {1417,7} ss.row_regexp = "k"{55,14}{31,13}{55,11}.value{57,10}"^v[24].*{64,15}{40,15}{121,11}.columns.push_back("col"){184,15}columns{181,8}

 {534,51}{483,100}{483,67}{3637,34}
// test for issue 484{943,14}n_keysonly{952,62} ss.keys_only{1980,8}{595,11}{29,9}y{594,10}{1004,100}{1004,100}{1004,100}{1004,56}{1440,14}set{4003,22}t) {{1296,50}{1455,52} Mutator m{3982,10}>mutator_open{1455,19} 0, 0);
  cell{1030,11}(make_cell("k4", "col", "{1244,9}t", "v-ignore-this-when-{1277,11}1",{3939,20}{3947,9}"{2209,10} 22:22:22"){143,43} 0, "v4",{75,19}23{75,34}k5{75,14}v5{75,21}{150,36}k2{150,14}v2a{76,57}k3{226,13}"{149,23}", 0{353,29} {1902,10}:KeyFlag::DELETE_ROW{1259,13}{554,8}_s{1902,8}(m{1838,7}{39,20}_close(m{1326,36}{2247,12}chema{2249,49}chema schema{3042,60}>ge{132,8}(schema, {2244,16}{3091,13}{3333,21}
{2272,7}:map<std::string, AccessGroup>::iterator ag_it = schema.access_groups.begin({2766,11}{2386,7}t test access groups:"{2627,16}{2213,7}(ag_it !{100,22}.end(){3590,7}{102,8}"\t" << ag_it->firs{2882,15}
    ++ag_it{3684,7}{248,22} ColumnFamily{249,11} cf{249,12}.column_familie{251,32} column {47,7}{253,26}(cf{253,13}{104,16}{255,28} cf{255,30}+cf{255,8}{2962,13}_pu{1522,79} MutateSpec mutate_spec;
 {15,11}c.appname = "test-cpp"{36,15}.flush_interval = 1000{3076,53}{1560,27}"put1{1419,14}v1{1344,56}"put{1346,14}"this_will_be_deleted{1439,30}{3236,8}offer_cells{3235,19}{349,11}c{1250,12}cells.clear({174,34}t1", "no_such_{1678,7}{1775,17}{275,78}{1545,22}23{1545,77}>refresh_shared_mutato{3564,20}{678,11}c);
  try{3523,14}{394,54} }
  catch (ClientException &e{1223,7} // ok, fall through{59,7}{3926,28}
  sleep(2{3938,15}_async{3939,47}{1673,49} String insert;
  int num_expected_results = 6{32,11}{23,10} 0;
  HqlResult hql_result{3257,11}>hql_query({32,9}t, ns, "drop table if exists FruitColor{1841,13}{72,53}tLocation{75,66}tEnergy{148,40}"create table{212,10}r(data){70,58}{210,8}n{73,64}tEnergy{144,9}


  // async writes
  {
    Future ff{3945,10}>future_open(0);
  {3064,8}rAsync color{949,7}r      {4008,10}>async{979,7}{3093,11}"{511,10}", ff{3093,7}{92,15} location{95,11}{92,39}{531,9}{95,27} energy{188,13}{187,39}{551,7}{188,14}{3736,42}color,{223,8}n, energy;

    color{3354,21}"apple", "data", 0, "red"));{59,31}"kiwi{58,14}"brown{60,35}"pomegranat{125,15}"pink"));

   {432,8}n{189,41}"Western Asia{198,8}{71,30}{201,19}"Southern Chin{72,39}{213,26}"Iran{213,9} energy{400,38}0 , "2.18kJ/g{406,8}{66,28}{407,16}0 , "0.61Cal{66,38}{413,23}0 , "0.53{73,9}
{1833,12}{921,14}{3460,10}({975,12}r, color{605,7}{59,31}({847,13}r{725,7}y{61,38}({1003,15}{798,10}n{186,29}_flush{182,13}{175,29}_flush{110,16}{51,35}{222,14}r{754,7} Result {1808,9} {1857,16}s=0;
  {3384,8}(tru{2130,8}{2231,10}{1382,7}_get_result({1858,7}{1308,12}   ++{1947,10}s{21,7} if (result.is_empty){4006,8} break{42,21}_scan == {147,13}{3504,10}"All {2077,7} are {2098,7}d to be from mutators{3624,17}       _exit(1{193,8} }{180,21}error{139,27}"Got un{129,8} error{129,12}r{128,51}({2278,11} > 3{120,34} number of{280,8}{132,60}{360,9}Async flush successful{338,19} }

{497,7}({1952,14}_has_outstanding(ff) || !{1991,14}_{544,7}y{32,7}{2022,15}_is_cancelled(ff{4034,8}{4036,10}"Future should not have any {127,10}g operations or queued{588,8} or be {105,8}d{571,21}{569,14}{249,7}{2197,15}_cancel(ff);{280,8}({242,18}{211,45}{154,50}{1366,26}_close{1180,42}_close{1180,45}_close{1180,17}{301,20}close{300,7} }

  RowI{4018,7} ri_apple;
 {12,8}e.start_row = "apple"{32,12}.__isset{40,12} tru{69,13}.end_row{66,29}{37,7}{64,9}{158,18}_kiwi;
 {11,7}i{156,13}"kiwi{155,7}_kiwi{154,31}_kiwi{116,10}{64,26}{152,34}_{2331,10}{316,7}{18,11}{322,14}{2374,12}{328,7}{44,12}{334,31}{87,12}{187,11}{85,39}{353,19} ScanSpec ss;
  ss.row_intervals{2689,10}({541,7}e){40,33}_kiwi{39,34}{310,11}{85,8}{589,8}{133,13}s{529,11}{3230,38} Scanne{3228,12}_scanner{3226,20}{28,7}{3226,28} ss{89,17}{3225,9}{92,9}{89,39}{3223,15}{92,20}{3222,7}{182,11}{181,39}{3220,13} ss);

{2209,18} ResultSerializ{1431,8}t_s{18,8}d{38,9}tAsArrays{36,7}_as_arrays;

{2258,20}{1879,15}s<2{2283,57}{2262,64} fals{2263,56} scan{2260,100}{2260,21} async scan " << result.error_msg{2412,40}
{2593,18}id =={792,13}r{2604,9}{2414,12} result from {4013,9}r: "{2699,7} else{90,17}{793,16}{93,39}{4014,8}n{96,32}{797,14}{187,39}tEnergy: ;{189,13}{2663,22}{249,12} unknown {1090,7} id{401,12}.id{2919,8}     << " expecting one of " <<{1161,14} << ", " <<{1097,17}{28,7}"{89,15}{1045,15}{2925,46} for (size_t ii=0; ii{598,8}.cells.size(); ++ii{3084,18}{44,12}s[ii]{3054,22}{3319,11}s++{3059,13} }
{565,12}{2940,12} < 4{3346,34}{1149,10}s({1166,15}s{1083,25}{1202,10}s{3355,41}{52,14}{1103,100}{3363,32}{198,15}{1113,80}{293,11}{1123,9}g{729,15}{1135,54}{383,12}{1145,46}{1643,10}s{1155,41}{110,17}{1165,44}{113,21}{1175,34}{226,17}{1185,42}{227,21}{1195,51}{299,16}{1205,100}{1205,100}{1205,19}i {691,18}{1216,37} "{" {3985,9}{1296,12} jj=0; jj{91,24}s[ii]{1311,10}+jj{2132,11}   if (jj > 0{2206,9}{4061,12}",{1842,9}{4084,11}{1183,18}{1371,9}])[jj]{2157,9}{2141,8}{3971,10}"}{2200,23}{1406,56} 6){1405,33}{2590,10}d{1406,7}{2608,10}d{1407,26}{2645,10}d{1408,42}{53,14}{2512,100}{1409,33}{200,15}{1410,81}{296,11}{1411,80}{387,12}{1412,47}{3091,10}d{1413,42}{112,17}{1414,45}{115,21}{1415,35}{230,17}{1416,43}{231,21}{1417,52}{304,16}{2623,30}{410,14}{2634,100}{2634,66} {3639,9}dCellsReader reader((void *){1020,17}.cells.c_str(),{2869,12}{2880,11}{22,12} (uint32_t{78,24}.length(){3633,8} Hypertable::Cell hcel{3511,8} while(reader.next(){3613,11} reader.get(hcell{3719,8}{3640,9} hcell{2808,60}{3850,23}_cancel(ff{3835,8}{3806,11} }
  }

{3774,10}Asynchronous scans finished{3760,15}

  // --------{8,7}{15,14}{29,28}{57,9}-{127,10}"Testing ColumnPredicate{3884,18} ScanSpec spec;
 {51,15}e cp;
  cp.column_family = "data";
  cp.__isset{37,16} true;
  cp.operation ={152,15}eO{27,7}n::PREFIX_MATCH{92,14}{65,12}{88,11}.value = "red{143,15}{28,8}{135,8} spec{201,7}_p{278,8}s.push_back(cp){40,8}{212,15}{48,10}s{216,8}

  ScannerAsync cp{3645,8} ={3363,8}>scanner_open(ns, "{4009,9}r", spec);
  while ({3119,11} std::vector<{824,11}:ThriftGen::Cell> cells;
{3482,11}>next_cells(cells,{158,10}r);
{3457,7}(cells.empty(){4009,7}{3443,11} assert({3711,11})=={3772,7} foreach_ht(const{989,12}{165,15}l &cell, cells{3772,9}{4052,7} {950,24}{128,11}l.key.row == "apple"{3908,8}{39,12}{529,7}== "red{35,7} }
  }
{3769,9}{406,8}_close({283,14}{912,71}
{111,10}>async{3410,7}{117,8}{3430,13});{46,30}({3366,16}{49,32}({3299,14}{96,12}{1235,8}close{1234,7}{568,9}namespac{31,7}(ns);
 {2704,16} != num_{3911,7}d{2770,7}{473,8}{3959,8}"E{3943,7} " <<{50,20}s << " receiv{40,11}{31,11}{3982,15}{3978,12} }

}

void check_error(std::string{4074,8}d, {22,11} &{114,7}d{1768,21} std::ostream &out)
{
{4077,7}{171,7} !={2757,8}d{247,23}d: " <<{2796,9} << ";{237,8}{30,7}{252,9}{235,32}{234,8} test_error(Thrift::Client *client,{192,18}) {
  String s;{668,11}>error_get_text(s{3109,7}{337,12}("HYPERTABLE ok", s, out{694,12}{72,18} 1{72,28} protocol error{84,39} 2{156,28} request truncated{171,39} 99999{247,17}"ERROR NOT REGISTERED{254,11}
}
